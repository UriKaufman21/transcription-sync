version: '3.8'

services:
  # Database Services
  mysql:
    image: mysql:8.0
    container_name: transcription-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: transcription_db
    volumes:
      - ./db/init-scripts/mysql:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  # Mock YouTube DB - For development and testing
  youtube-db:
    image: mysql:8.0
    container_name: mock-youtube-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MOCK_YOUTUBE_DB_PASSWORD}
      MYSQL_DATABASE: youtube_db
    volumes:
      - ./db/init-scripts/youtube:/docker-entrypoint-initdb.d
      - youtube-db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: transcription-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health?pretty | grep status | grep -E '(green|yellow)'"]
      interval: 10s
      timeout: 10s
      retries: 20

  minio:
    image: minio/minio
    container_name: audio-storage
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - audio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  extractor:
    build:
      context: ./services/extractor
    container_name: extractor-service
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      youtube-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      YOUTUBE_DB_HOST: youtube-db
      YOUTUBE_DB_USER: root
      YOUTUBE_DB_PASSWORD: ${MOCK_YOUTUBE_DB_PASSWORD}
      YOUTUBE_DB_NAME: youtube_db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_OUTPUT: raw-transcripts
      API_POLLING_INTERVAL: 60

  transformer:
    build:
      context: ./services/transformer
    container_name: transformer-service
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_INPUT: raw-transcripts
      KAFKA_TOPIC_OUTPUT: processed-transcripts
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: transcription_db
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: audio-files

  sync:
    build:
      context: ./services/sync
    container_name: sync-service
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_INPUT: processed-transcripts
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_INDEX: transcriptions

  # Messaging and Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Mock API Service - For development and testing
  mock-api:
    build:
      context: ./services/mock-api
    container_name: mock-custom-api
    ports:
      - "8080:8080"
    volumes:
      - ./services/mock-api/sample-data:/app/sample-data

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus

volumes:
  mysql-data:
  youtube-db-data:
  elasticsearch-data:
  audio-data:
  prometheus-data:
  grafana-data: